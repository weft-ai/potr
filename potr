#!/bin/bash

# Simple script to run build commands in docker.

############# FUNCTIONS AND CONSTANTS

tempFileName="/tmp/potr.$$"
hashDockerPath="/tmp/potr.hash.$$"
lockFileName="potr.sum"

print_help() {
    cat << EOF

Potr is a simple container build script. it is meant only to perform common out-of-container operations (build a build container, run it etc.) Run with no arguments is equivalent to "potr build".

Commands:

    run [args]- run the given command in the build container.
    deploy - run the build container and create a deploy container locally.
    update - update the locked build container definition.
    clean - remove the build and deployment containers for this project.
    push - build the deployment container and push it to the repo noted in the potr.conf file. Note it does not re-run the build.

Options in the potr.conf file:

    name - name of the project, used in the container names.
    args_common - args passed to every command run
    <command name>_args - args passed to the given command name (in addition to the common args).
EOF
}

build_container() {
    # Always build the docker image; because of caching it is cheap
    ( set -x; cd $build_container_dir; $cmd_prefix $docker_cmd build --iidfile $tempFileName -t potr-temp-$$ . )

    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Use the id instead of the tag so we can support multiple different
    # versions building on the same machine.
    id=`cat $tempFileName`
    shortId=${id: -14}
    $cmd_prefix rm $tempFileName

    ( set -x; $cmd_prefix $docker_cmd tag $id $name-build-$shortId )
    ( set -x; $cmd_prefix $docker_cmd rmi potr-temp-$$ )

    #check_and_update_lock_file
}

check_and_update_lock_file() {
    # Get a hash of the build container
    $cmd_prefix mkdir -p $hashDockerPath

    $cmd_prefix $docker_cmd inspect -f '{{range $index, $value := .Config.Env}}{{println $value}}{{end}}' $id > $hashDockerPath/env
    $cmd_prefix $docker_cmd inspect -f '{{json .Config.Cmd}}' $id > $hashDockerPath/cmd
    $cmd_prefix $docker_cmd inspect -f '{{json .Config.Entrypoint}}' $id > $hashDockerPath/entrypoint

    hashDir="/potr/to-hash"

    cat << EOF > $hashDockerPath/Dockerfile
    FROM $id

    FROM ubuntu:bionic-20190718

    # Copy over the contents of the build container and metadata from the container.
    COPY --from=0 / $hashDir/data
    COPY env cmd entrypoint $hashDir/mdata/
    RUN chmod -R 664 $hashDir/mdata/*

    WORKDIR $hashDir

    # Hash all the data and mdata files. Ignore mtimes, since they will change each time you
    # rebuild the container.
    RUN tar --mtime='2019-01-01 00:00Z' --sort=name -cf - . | md5sum > /potr/hash

    WORKDIR /potr

    # Generate a testing script used if we fail
    RUN echo "cd $hashDir; find . -type f -print0 | sort -z | xargs -0 md5sum" > /potr/print_hashes.sh
    RUN echo "find . -print0 | sort -z | xargs -0 stat -c \"%N %F %G %U %a\"" >> /potr/print_hashes.sh

    CMD ["cat", "hash"]
EOF

    $cmd_prefix $docker_cmd build -t $name-build-$shortId-hash $hashDockerPath

    $cmd_prefix rm -rf $hashDockerPath

    hash=`$cmd_prefix $docker_cmd run --rm $name-build-$shortId-hash`


    # If the lock file exists, check the id of the built container against it
    if [ -f $lockFileName ]
    then
        lockedHash=`cat $lockFileName`
        if [ "$hash" != "$lockedHash" ]
        then
            echo ""
            echo "*****************************************************************"
            echo "Locked container doesn't equal built container"
            echo " Locked hash: $lockedHash"
            echo " Built hash:  $hash"
            echo ""
            echo "If you have updated the build container definition run \"potr update\""
            echo "to update the lock file. If not, you probably have a non-stable build"
            echo "container, which you need to fix."
            echo "Saving container description..."
            echo ""

            describe_build_container

            exit 1
        fi
    else
        echo "Updating lock file."
        echo "$hash" > $lockFileName
    fi
}

deploy_container() {
    ( set -x; $cmd_prefix $docker_cmd build --iidfile $tempFileName -t $name . )

    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Use the id instead of the tag so we can support multiple different
    # versions building on the same machine.
    did=`cat $tempFileName`
    $cmd_prefix rm $tempFileName
}

describe_build_container() {
    $cmd_prefix $docker_cmd run --rm $name-build-$shortId-hash bash /potr/print_hashes.sh > /tmp/potr-build/build-container-description
}

run() {
    # If we have a user defined network listed in the conf, then create
    # it if it doesn't exist already.
    if [ "$docker_network" != "" ]
    then
        $cmd_prefix $docker_cmd network create $docker_network || true
    fi

    build_container

    cmd="$1"

    # Get the extra args for this command (if they exist)
    args_name="${cmd}_args"
    extra_args="${!args_name}"
    build_args="$args_common $extra_args"

    # Run the given command in the build container. If nothing is provided, default
    # the build container default.
    ( set -x; $cmd_prefix $docker_cmd run -ti --rm $build_args $id "$@" )
}

check_setup() {
    set +e

    version_cmd="docker version -f '{{.Server.Version}}'"

    # Try to get the docker version
    v=`$version_cmd`

    # If we failed, try again with sudo
    if [ $? -ne 0 ]
    then
        v=`sudo $version_cmd`

        # If we still failed then exit.
        if [ $? -ne 0 ]
        then
            echo "Couldn't run docker version cmd."
            print $v
            exit $?
        fi

        # Otherwise use sudo for docker.        
        cmd_prefix="sudo"
    fi

    # Check the version
    echo $v

    set -e
}

############# MAIN LOGIC

set -e

$cmd_prefix mkdir -p /tmp/potr-build

# These parameters are overridable in potr.conf.
args_common="-v `pwd`:/src"
build_container_dir="build-container"
docker_cmd="docker"
cmd_prefix=""

# Read config and validate.

if [ ! -f "potr.conf" ]
then
    echo "This directory doesn't appear to be a potr project root. No potr.conf file found."
fi

source potr.conf

if [ "$name" == "" ]
then
    echo "potr.conf must contain at least a name definition: name=\"myproj\""  
    exit 1
fi

# Check for setup specfic parameters and requirements.
check_setup

if [ "$#" -eq 0 ]
then
    run "$@"
    exit $?
fi

if [ $1 == "-d" ]
then
    set -x
    shift
fi

if [ $1 == "-s" ]
then
    cmd_prefix="sudo"
    shift
fi

# Try again to make potr work with options but no command.
if [ "$#" -eq 0 ]
then
    run "$@"
    exit $?
fi

if [ $1 == "help" ] || [ $1 == "-h" ] || [ $1 == "--help" ]
then
    print_help
    exit 0
fi

if [ $1 == "run" ]
then
    shift
    run "$@"
    exit $?
fi

if [ $1 == "update" ]
then
    $cmd_prefix rm $lockFileName
    build_container
    exit $?
fi

if [ $1 == "deploy-container" ]
then
    deploy_container
    exit $?
fi

if [ $1 == "build-container" ]
then
    build_container
    exit $?
fi

if [ $1 == "clean" ]
then
    images=`$cmd_prefix $docker_cmd images -q $name-build-*`
    $cmd_prefix $docker_cmd rmi $images
    exit $?
fi

aws="$cmd_prefix $docker_cmd run --rm -t -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} -e AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} mesosphere/aws-cli"

if [ $1 == "aws-docker-login" ]
then
    login_cmd=`$aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION | tr -d '\r\n'`
    bash -c "$login_cmd"
fi

if [ $1 == "deploy" ]
then
    # Build the code
    run
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    # Build the deploy container.
    deploy_container
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi
fi

if [ $1 == "push" ]
then
    docker_repo=$2
    shift
    shift
    tags=$@

    echo $tags

    # Build the deploy container.
    deploy_container
    if [ $? -ne 0 ]
    then
        # If the build command failed, then exit
        exit $?
    fi

    for version in ${tags}
    do
        ( set -x; $cmd_prefix $docker_cmd tag $did "$docker_repo:$version" )
        ( set -x; $cmd_prefix $docker_cmd push "$docker_repo:$version" )
    done
fi
